<?php

namespace Database\Seeders;

use App\Models\Post;
use Illuminate\Database\Seeder;

class PostsTableSeeder extends Seeder
{
    public function run() : void
    {
        $post = Post::create([
            'user_id' => 1,
            'title' => '4 astuces pour un code propre et solide sur le long terme',
            'slug' => 'astuces-tutoriel-code-propre-laravel',
            'excerpt' => 'Pouvoir revenir sur un projet apr√®s des mois sans y avoir touch√© est un avantage. D√©couvrez quelques astuces pour ne plus √™tre totalement perdu.',
            'content' => <<<'EOT'
*Il est tellement facile de laisser un projet moisir au fond du tiroir une fois qu'il est d√©ploy√© en production.*

*Mais un beau jour, votre client finira par revenir vers vous. Il voudra faire √©voluer son projet. Malheureusement, votre code est devenu incompr√©hensible et il est devenu tr√®s simple de provoquer des r√©gressions. C'est normal, rares sont ceux qui poss√®dent une m√©moire infaillible. La livraison devient un enfer et vous n'avez qu'une seule envie : faire subir √† votre client les pires ch√¢timents imaginables.*

*Attention cependant : ce n'est pas la faute de votre client si la situation a √©chapp√© √† votre contr√¥le.*

*Voyons ensemble ce que vous pouvez faire d√®s maintenant pour changer √ßa.*

### Utilisez des packages open source

Croyez-en mon exp√©rience : utiliser du code test√© et √©prouv√© par la communaut√© donnera presque toujours de bien meilleurs r√©sultats que ce que vous aurez vous-m√™me pondu. Pourquoi¬†?

- Un package open source est d√©velopp√© par une multitude de personnes tr√®s intelligentes ;
- Il est test√© et √©prouv√© par la communaut√©. Selon la popularit√© du package, le nombre d'individus se chiffre en dizaines de milliers ;
- Enfin, il est document√©. Et ne me dites pas que vous documenterez votre code plus tard ! Vous aurez la flemme, comme presque tout le monde, et ce seront vos rempla√ßants qui en p√¢tiront.

Alors √† partir de maintenant, faites donc √ßa. Je vous garanti que cela paiera tr√®s vite.

<figure>
  <img src="https://larabiz.fr/storage/13/conversions/f335fff99ef05af6c0203d52809af2f91433be0a-large.jpg" alt="Capture d'√©cran de tous les contributeurs de Laravel.">
  <figcaption>Parfois, mieux vaut √©crire son code soi-m√™me. Mais la plupart du temps, je pr√©f√®re que mes arri√®res soient surveill√©es par toutes ces personnes.</figcaption>
</figure>

### Formatez automatiquement votre code

OK. Le premier qui n'applique pas ce conseil sera exil√© sur une √Æle d√©serte sans connexion √† internet.

Personnellement, j'utilise un outil appel√© [PHP CS Fixer](https://github.com/FriendsOfPHP/PHP-CS-Fixer), coupl√© √† Visual Studio Code via [cette extension](https://github.com/junstyle/vscode-php-cs-fixer).

Installez PHP CS Fixer globalement avec Composer :

```bash
composer global require friendsofphp/php-cs-fixer
```

Ensuite, cr√©ez votre fichier de configuration ([servez-vous du mien ici](https://gist.github.com/benjamincrozat/35388133c82b674209fe917c71f03377) si vous le souhaitez) que vous mettrez √† la racine de votre projet.

<figure>
  <img src="https://larabiz.fr/storage/14/conversions/3136a520b9cb3c8da985c0d7623dc6ec59458796-large.jpg" alt="Capture d'√©cran du fichier .php-cs-fixer.php">
</figure>

Si l'extension est bien configur√©e, alors votre code sera format√© √† chaque fois que vous sauvegarderez votre document.

L'avantage d'avoir fait tout √ßa¬†? Vos collaborateurs aussi pourront en profiter.

### Commentez votre code

Haha ! Je vous vois d√©j√† arriver :

> Tant que ton code est bien √©crit, il n'y a pas besoin de le commenter !

Et bien non ! Comme tout dans cet univers, √ßa d√©pend. Alors attention, Il vaut mieux ne pas commenter son code si c'est pour faire ce genre d'infamie :

```php
// Create user.
User::factory()->create();
```

**Ce commentaire ne sert √† rien**. C'est de la d√©coration. Et j'avoue m'√™tre rendu coupable de √ßa un nombre de fois incalculable dans ma carri√®re.

Prenons plut√¥t un bon exemple tout droit sorti de la codebase de Larabiz :

```php
Subscriber::create($input)->notify(new ConfirmSubscription);
```

√áa coule de source, non¬†? Ce code n'a absolument pas besoin d'√™tre comment√©.

Maintenant, prenons du code issu d'un autre de mes projets :

```php
// Create an incomplete purchase (meaning there's no start and end dates until the payment succeeded).
$purchase = Purchase::factory()->incomplete()->create([
    'opening_id' => $this->opening->id,
    'boost_id' => $this->boost->id,
]);

// Let's pretend Stripe called our web hook.
$job = new BoostOpening(new WebhookCall(['payload' => ['data' => ['object' => ['id' => $purchase->checkout_session_id]]]]));
$job->handle();

// After the job did its job (ü•Å), the purchase should
// have a start date that equals to right now().
$this->assertEquals(
    now()->toDateTimeString(),
    ($purchase = $purchase->fresh())->starts_at
);

// ‚Ä¶ and an end date which equals to now + the boost's duration in days.
$this->assertEquals(
    now()->addDays(\$this->boost->days)->toDateTimeString(),
    $purchase->ends_at
);

// Then, the opening should detect it's been boosted.
$this->assertEquals(1, $this->opening->purchases()->count());
```

Il s'agit d'un test automatis√©. Il est tr√®s compliqu√© de rendre lisible ce genre de code. Dans le cas pr√©sent, le mieux est de communiquer ses intentions. Et croyez-moi, remettre les mains dans une codebase comment√©e apr√®s <del>quelques mois</del> <ins>semaines</ins> sans y avoir touch√©, c'est un v√©ritable bonheur.

### Respectez les conventions de Laravel

*Sortir des sentiers battus est une excellente chose* et je vous encourage vivement √† le faire. Mais comme je l'ai dit plus haut, tout d√©pend du contexte.  
Ici, le mieux est de coller au maximum avec ce que vous pr√©conise Laravel. Ne chamboulez pas sa [structure](https://laravel.com/docs/structure) et **utilisez au maximum** toutes les fonctionnalit√©s qu'il vous offre. Ainsi, vous pourrez :

1. Faciliter la collaboration avec les d√©veloppeurs qui connaissent Laravel aussi bien que vous ; (Eh oui, car vous aurez √† nouveau la flemme de documenter tous les trucs farfelus que vous aurez invent√©s !)
2. B√©n√©ficier d'am√©liorations en m√™me temps que le framework √©volue.

![Logo de Laravel.](https://larabiz.fr/storage/15/conversions/2974c234a1e6132cb86f8ec71370de5645463db8-large.jpg)

### Conclusion

Il y a encore bien plus que vous pourriez faire pour faciliter votre vie de d√©veloppeur, ainsi que celle de vos coll√®gues. Mais nous verrons cela une prochaine fois. Le but de cet article √©tait de vous donner des conseils facilement applicables √† vos projets.

√Ä bient√¥t ! üëã
EOT,
            'certified_for_laravel' => 9,
            'created_at' => '2022-02-03 21:36:18',
        ]);

        $post
            ->addMediaFromUrl('https://larabiz.fr/storage/ZjfzeaNKpYWkZpl3VBeeYUzAXHIbXemFHnnWADUk.jpg')
            ->toMediaCollection('illustration');

        $post
            ->addMediaFromUrl('https://larabiz.fr/storage/13/f335fff99ef05af6c0203d52809af2f91433be0a.jpg')
            ->toMediaCollection('images');

        $post
            ->addMediaFromUrl('https://larabiz.fr/storage/14/3136a520b9cb3c8da985c0d7623dc6ec59458796.jpg')
            ->toMediaCollection('images');

        $post
            ->addMediaFromUrl('https://larabiz.fr/storage/15/2974c234a1e6132cb86f8ec71370de5645463db8.jpg')
            ->toMediaCollection('images');

        $post = Post::create([
            'user_id' => 1,
            'title' => 'Comment cr√©er une page avec Laravel',
            'slug' => 'comment-creer-page-laravel',
            'excerpt' => "Afin de cr√©er une page sur Laravel, il nous faut comprendre les bases du syst√®me de routing. Nous allons voir √† quel point c'est extr√™mement simple.",
            'content' => <<<'EOT'
Prenons une installation propre de Laravel :

```bash
laravel new mon-super-site && cd mon-super-site
```

Ouvrez le projet dans votre √©diteur favori et ajoutez ceci √† la fin du fichier `routes/web.php` :

```php
Route::get('/ma-super-page', function () {
    return 'Bienvenu sur ma super page !';
});
```

Et voil√† ! C'est un tel plaisir de constater de l'avancement lorsqu'on se forme sur une technologie.

![Capture d'√©cran de notre nouvelle page.](https://larabiz.fr/storage/5/conversions/eefc2ff24d1653b863dc68866c4c42550263b545-large.jpg)

Bien s√ªr, ce n'est pas en faisant des pages de cette qualit√© que vous arrivez √† lancer le projet de vos r√™ves.  
Il est tout √† fait possible d'√©crire le HTML requis pour cr√©er une vraie page web dans le callback, mais je pense que nous serons tous d'accord pour dire que c'est une solution abominable.

Cr√©eons plut√¥t une vue :

```bash
touch resources/views/ma-super-page.blade.php
```

Dans ce fichier fraichement cr√©√©, ajoutez le HTML suivant :

```blade
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">

        <title>Ma Super Page</title>

        <script src="https://cdn.tailwindcss.com"></script>
    </head>
    <body>
        <div class="flex items-center justify-center min-h-screen">
            <h1 class="font-thin text-5xl">Ma Super Page</h1>
        </div>
    </body>
</html>
```

Enfin, changez la d√©claration de la route avec celle-ci :

```php
Route::view('/ma-super-page', 'ma-super-page');
```

Actualisez votre page et admirez le r√©sultat. ü§ô

![Capture d'√©cran de notre page avec un minimum de CSS.](https://larabiz.fr/storage/6/conversions/fa1e490dded4d1de1c4ebf218299b0e827943db3-large.jpg)

Maintenant que votre page est cr√©√©e, pourquoi ne pas [apprendre √† cr√©er des formulaires](https://larabiz.fr/blog/comment-creer-formulaire-laravel)¬†? Il vous faudra aussi les styliser et j'ai √©crit deux articles √† propos de l'[int√©gration de Tailwind CSS](https://larabiz.fr/blog/comment-tailwind-css-3-laravel) et [Bootstrap](https://larabiz.fr/blog/comment-bootstrap-5-laravel) dans un projet Laravel.

Bonne chance dans votre apprentissage et √† bient√¥t sur Larabiz. üëã
EOT,
            'certified_for_laravel' => 9,
            'created_at' => '2022-02-03 21:40:51',
        ]);

        $post
            ->addMediaFromUrl('https://larabiz.fr/storage/w2txfZFXQ0Dvraig533tB64R3CBwX2eevvVVHDLy.jpg')
            ->toMediaCollection('illustration');

        $post
            ->addMediaFromUrl('https://larabiz.fr/storage/5/conversions/eefc2ff24d1653b863dc68866c4c42550263b545-large.jpg')
            ->toMediaCollection('images');

        $post
            ->addMediaFromUrl('https://larabiz.fr/storage/6/conversions/fa1e490dded4d1de1c4ebf218299b0e827943db3-large.jpg')
            ->toMediaCollection('images');

        $post = Post::create([
            'user_id' => 1,
            'title' => 'Comment cr√©er un nouveau projet avec Laravel',
            'slug' => 'comment-creer-nouveau-projet-laravel',
            'excerpt' => "Saviez-vous qu'il y a un installeur officiel Laravel¬†? Ou qu'il est possible de passer tout un tas d'options lors de la cr√©ation d'un nouveau projet¬†?",
            'content' => <<<'EOT'
## Cr√©er un nouveau projet Laravel simple

Rien de compliqu√© pour cette premi√®re commande. Elle cr√©e un nouveau projet bas√© sur la derni√®re version de Laravel. En fait, il s'agit de l'√©quivalent de la commande `composer create-project laravel/laravel mon-super-site`.

```bash
laravel new mon-super-site
```

Un nouveau dossier est cr√©√©, le d√©p√¥t *laravel/laravel* clon√©, les d√©pendances PHP install√©es et un *.env* cr√©√© avec une cl√© de chiffrage fraiche.

## Cr√©er un nouveau projet Laravel avec un d√©p√¥t Git initialis√©

Les choses deviennent encore plus int√©ressantes √† partir de l√†. De nos jours, il est suicidaire de commencer un nouveau projet sans le versionner avec Git. Heureusement, l'installeur Laravel est l√† pour nous √©pauler.

```bash
laravel new mon-super-site --git
```

Entrez dans le dossier fraichement cr√©√© et v√©rifiez que le d√©p√¥t a bien √©t√© initialis√© avec la commande `git log` :

```
commit af00c6d789c5278495ee797dc6dd9556af9a7f2d (HEAD -> main)
Author: Benjamin Crozat <hello@benjamincrozat.com>
Date:   Tue Feb 1 18:16:50 2022 +0100

Set up a fresh Laravel app
```

## Cr√©er un nouveau projet Laravel avec un d√©p√¥t Git initialis√© et pouss√© sur GitHub

Celle-ci, c'est ma pr√©f√©r√©e. Il faudra d'abord installer le [CLI officiel de GitHub](https://github.com/cli/cli#installation) par contre.  
Une fois install√© et authentifi√©, ex√©cutez la commande suivante :

```bash
laravel new mon-super-site --github
```

Cela cr√©era un d√©p√¥t Git priv√© en un clin d'≈ìil. Si vous avez l'habitude de d√©marrer 10 projets par semaine, vous appr√©cierez s√ªrement le gain de temps.

## Cr√©er un nouveau projet bas√© sur Laravel Jetstream

[Laravel Jetstream](https://jetstream.laravel.com) est un kit de d√©marrage taill√© pour ceux qui ont besoin de lancer un projet vite et bien. Pas de temps √† perdre sur le choix du stack technique, des design patterns √† mettre en place et autres d√©tails qui n'alimentent pas un compte en banque.

Si vous √™tes adepte de Jetstream, il y a aussi une commande pour √ßa :

```bash
laravel new mon-super-site --jetstream-prompt
```

## Cr√©er un nouveau projet depuis une version exp√©rimentale de Laravel

Pour celles et ceux qui aiment vivre dangereusement, il y a une commande pour √ßa :

```bash
laravel new mon-super-site --dev
```

√Ä partir de l√†, vous pourriez apprendre √† [cr√©er votre premi√®re page](https://larabiz.fr/blog/comment-creer-page-laravel). ü§ô
EOT,
            'certified_for_laravel' => 9,
            'created_at' => '2022-02-03 21:41:57',
        ]);

        $post
            ->addMediaFromUrl('https://larabiz.fr/storage/o3IbbaKgpgXPTy2m1FxLd1xDogNcVJwHKf62GX8a.jpg')
            ->toMediaCollection('illustration');

        $post = Post::create([
            'user_id' => 1,
            'title' => 'Comment cr√©er un formulaire avec Laravel',
            'slug' => 'comment-creer-formulaire-laravel',
            'excerpt' => "L'avantage de Laravel, c'est de pouvoir √©crire du code simple et concis. Ici, nous allons voir comment cr√©er un formulaire sans fioritures.",
            'content' => <<<'EOT'
√ätre capable de r√©colter l'entr√©e d'un utilisateur sur un site web est primordial. Il y a tout un tas d'applications pour √ßa comme :
- L'authentification d'un utilisateur ;
- Un panneau d'administration qui permet de poster des articles ;
- Poster des commentaires ;
- Etc.

Afin d'√™tre capable de suivre ce tutoriel, je vous recommande d'√™tre au point avec les routes en allant lire [cet article](https://larabiz.fr/blog/comment-creer-page-laravel) d'abord.

### Cr√©ation des routes

Dans `routes/web.php`, cr√©ons la route permettant d'afficher le formulaire en se rendant sur la page */mon-super-formulaire*.  
On utilisera la m√©thode `Route::view`, permettant de directement lier une vue √† une page. Pourquoi¬†? Cela nous permet d'√©crire moins de code. Donc, plut√¥t que d'√©crire ceci :

```php
Route::get('/mon-super-formulaire', function () {
    return view('mon-super-formulaire');
});
```

On √©crira √ßa :

```php
Route::view('/mon-super-formulaire', 'mon-super-formulaire');
```

Ensuite, la route permettant de traiter les donn√©es envoy√©es par l'utilisateur √† travers le formulaire. La particularit√©, c'est que le navigateur doit envoyer une requ√™te POST √† notre site. Nous allons donc faire en sorte que la route r√©ponde √† cette m√©thode HTTP :

```php
Route::post('/traitement-de-mon-super-formulaire', function () {
	// C'est ici qu'on √©crira le code.
});
```

### Cr√©ation de la vue contenant le HTML du formulaire

Nous avons d√©j√† cr√©√© la route permettant d'afficher le contenu de la vue `mon-super-formulaire.blade.php`. Mais jusqu'√† maintenant, elle renvoyait une erreur car elle n'existait pas. Corrigeons √ßa sans attendre.

```bash
touch resources/views/mon-super-formulaire.blade.php
```

Dans ce nouveau fichier, ajoutez le code Blade suivant :

```blade
{{-- Notez bien l'utilisation de la m√©thode HTTP "POST". --}}
<form method="POST" action="/traitement-de-mon-super-formulaire">
	{{-- La directive "csrf" permet de se prot√©ger des attaques CSRF.
	Il s'agit d'un tr√®s vaste sujet, alors partons du principe
	qu'elle est requise dans chacun de vos formulaires. --}}
    @csrf

    <input type="text" name="nom" />

    <button type="submit">
	    Envoyer
	</button>
</form>
```

### Traitement des donn√©es

Reprenons la route que nous avons cr√©√© ci-dessus et ajoutons la validation des donn√©es et l'affichage :

```php
// Cette fois, on utilise la m√©thode HTTP "POST".
Route::post('/traitement-de-mon-super-formulaire', function () {
    // Assurons-nous que ce que saisi l'utilisateur :
	// - N'est pas vide ;
	// - Fait plus de 3 caract√®res ;
	// - Ne fait pas plus de 255 caract√®res.
	//
	// Signalons au passage que l'utilisateur a saisi "Homer" dans le formulaire.
	$input = request()->validate([
		'nom' => ['required', 'min:3', 'max:255'],
	]);

	// Pour terminer, on affiche "Bonjour, Homer !";
	return 'Bonjour, ' . $input['nom'] . ' !';
});
```

Plus d'informations sur les diff√©rentes r√®gles de validation : https://laravel.com/docs/validation

Apr√®s √ßa, l'id√©al serait d'ajouter l'attribut `required` dans le champ du formulaire afin d'avoir une validation aussi bien dans le front-end que le back-end :

```html
<input type="text" name="nom" required />
```

![Capture d'√©cran de la validation du champ "nom".](https://larabiz.fr/storage/3/conversions/6bb42ead1f8e6ddf07dbaf652eb4da1666a00bc1-large.jpg)

Il est d√©sormais impossible d'envoyer le formulaire sans l'avoir rempli avant. Nous avons maintenant un formulaire parfaitement fonctionnel.

![Capture d'√©cran de l'affichage du pr√©nom dans le navigateur.](https://larabiz.fr/storage/4/conversions/82cff83c78368491513aff454cc2110c96362d9b-large.jpg)

√Ä vous maintenant de l'int√©grer dans un vrai projet si √ßa vous chante, d'utiliser les controllers, les custom requests et je ne sais quelle autre des nombreuses fonctionnalit√©s de Laravel.
EOT,
            'certified_for_laravel' => 9,
            'created_at' => '2022-02-03 22:34:08',
        ]);

        $post
            ->addMediaFromUrl('https://larabiz.fr/storage/F3avlqxOElk4JT2y8rasBY8CdtAKVhPMYxc0CVIl.jpg')
            ->toMediaCollection('illustration');

        $post
            ->addMediaFromUrl('https://larabiz.fr/storage/3/conversions/6bb42ead1f8e6ddf07dbaf652eb4da1666a00bc1-large.jpg')
            ->toMediaCollection('images');

        $post
            ->addMediaFromUrl('https://larabiz.fr/storage/4/conversions/82cff83c78368491513aff454cc2110c96362d9b-large.jpg')
            ->toMediaCollection('images');

        $post = Post::create([
            'user_id' => 1,
            'title' => 'Comment installer Tailwind CSS 3 dans un projet Laravel',
            'slug' => 'comment-tailwind-css-3-laravel',
            'excerpt' => 'Tailwind CSS d√©chaine les passions. Certains l‚Äôadorent, certains le d√©testent. D√©couvrez comment l‚Äôint√©grer √† votre projet Laravel.',
            'content' => <<<'EOT'
[Tailwind CSS](https://tailwindcss.com) est un framework CSS utilisant le concept des classes utilitaires. Il y en a pour quasiment tout et peuvent √™tre combin√©es ensemble afin de concevoir des interfaces web rapidement sans avoir √† vous soucier de l'organisation de vos fichiers ou du nommage de vos classes.

## Installez le package

Installez Tailwind CSS via NPM :

```bash
npm install tailwindcss
```

Le framework d√©pend de [PostCSS](https://postcss.org). Assurez-vous qu'il est install√© √©galement (normalement, toute nouvelle installation de Laravel l'int√®gre par d√©faut) :

```bash
npm install postcss --save-dev
```

## Cr√©ez le fichier de configuration

Le fichier de configuration de Tailwind vous permettra d'ajouter de nouvelles valeurs au framework et plus encore. C'est une pi√®ce essentielle que vous pouvez cr√©er gr√¢ce √† la commande suivante :

```bash
npx tailwind init
```

## Configurez Laravel Mix

Dans `webpack.mix.js`, demandez √† PostCSS d'utiliser le plugin.

```js
mix.postCss('resources/css/app.css', 'public/css', [
    require('tailwindcss')
])
```

## Ajoutez les directives `@tailwind`

Dans *resources/css/app.css*, nous devons demander √† PostCSS d'int√©grer tous les styles que g√©n√®rera le compilateur Just-in-Time de Tailwind. D'abord les styles de base, ensuite les composants (tel que `.container` par exemple), puis toutes les classes utilitaires que nous connaissons bien.

```css
@tailwind base;
@tailwind components;
@tailwind utilities;
```

## Dites au compilateur JIT o√π regarder

Maintenant, pr√©cisons quels sont les types de fichiers utilisant Tailwind dans `tailwind.config.js`

```js
module.exports = {
    content: [
        "./resources/views/**/*.blade.php",
    ],

    ‚Ä¶
}
```

## Codez !

Passons enfin au plus int√©ressant et demandons √† Tailwind de surveiller le moindre changement que nous faisons dans les fichiers que nous avons configur√©s √† l'√©tape pr√©c√©dente :

```bash
npm run watch
```

Enfin, importez le CSS :

```blade
<!DOCTYPE html>
<html>
	<head>
	    ‚Ä¶

	    <link rel="stylesheet" href="{{ mix('/css/app.css') }}" />
	</head>
	<body>
	    ‚Ä¶
	</body>
</html>
```

Puis commencez √† styler votre HTML ! Exemple :

```html
<button class="bg-blue-400 font-bold px-4 py-3 rounded text-white">
    Envoyer
</button>
```

## Bonus : √©vitez les probl√®mes de cache

Afin d'√©viter que votre navigateur vous serve une version mise en cache de votre CSS (que vous soyez en local ou en production), ajoutez ceci dans votre `webpack.mix.js`:

```js
mix.version()
```

En coulisse, Laravel Mix ajoutera une query string √† la fin de l'URL de votre feuille de style afin que votre navigateur ne puise pas dans son cache.
EOT,
            'certified_for_laravel' => 9,
            'created_at' => '2022-02-05 11:35:10',
        ]);

        $post
            ->addMediaFromUrl('https://user-images.githubusercontent.com/3613731/180869791-63e4cce8-c529-4fd6-97cc-f777f9a28f86.jpg')
            ->toMediaCollection('illustration');

        $post = Post::create([
            'user_id' => 1,
            'title' => 'Comment installer Bootstrap 5 dans un projet Laravel',
            'slug' => 'comment-bootstrap-5-laravel',
            'excerpt' => "Bootstrap est l'outil le plus populaire pour concevoir des interfaces travaill√©es en un clin d'≈ìil. Int√©grons-le dans Laravel gr√¢ce √† Mix.",
            'content' => <<<'EOT'
## Installer le package

Plut√¥t que d'utiliser le CDN de Bootstrap, nous allons utiliser Webpack (√† travers Laravel Mix). Cela nous permettra plus tard d'inclure seulement les briques que vous utilisez. Mais nous verrons cela plus tard.  
Pour le moment, ex√©cutez la commande suivante :

```bash
# Ou `yarn add bootstrap @popperjs/core`
npm install bootstrap @popperjs/core
```

## Configuration de Laravel Mix

Laravel Mix est une abstraction autour de Webpack. Si vous avez d√©j√† essay√© d'utiliser Webpack, vous appr√©cierez le gain de temps et d'√©nergie que cet outil vous fera gagner. Et √† mon avis, il serait b√™te de s'en priver.  
Dans votre fichier `webpack.mix.js`, assurez-vous d'avoir ceci :

```js
mix
    .css('resources/css/app.css', 'public/css')
    .js('resources/js/app.js', 'public/js')
```

## Import

Gr√¢ce √† Webpack, il est possible d'organiser son code JavaScript en modules, tout comme en PHP avec la fonction `include`. Rendez-vous dans `resources/js/app.js` et ajoutez ceci :

```js
import 'bootstrap'
import 'bootstrap/dist/css/bootstrap.min.css'
```

Oui, nous appelons un fichier CSS dans du JavaScript ! Mais ne vous inqui√©tez pas, c'est tout √† fait normal. Jetez un ≈ìil √† votre page, vous verez qu'il sera inclut dans une balise `style`.

## Appel du script dans le HTML

Maintenant que tout est compil√©, il vous faut appeler le CSS et le JavaScript sur votre page gr√¢ce aux balises `link` et `script` :

```blade
<!DOCTYPE html>
<html>
	<head>
	    ‚Ä¶

		<link rel="stylesheet" href="{{ mix('/css/app.css') }}" />
	</head>
	<body>
	    ‚Ä¶

		<script src="{{ mix('/js/app.js') }}"></script>
	</body>
</html>
```

## Compilation

La derni√®re √©tape, c'est la compilation. Il nous faut g√©n√©rer les fichiers `public/css/app.css` et `public/js/app.js`. Utilisez la commande ci-dessous :

```bash
# Ou `yarn dev`
npm run dev
```

## √âvitez le cache c√¥t√© navigateur lorsque le code a chang√©

Afin d'√©viter que votre navigateur vous serve une version mise en cache de votre JavaScript et votre CSS, ajoutez ceci √† votre `webpack.mix.js`:

```js
mix
	.css('resources/css/app.css', 'public/css')
    .js('resources/js/app.js', 'public/js')
    .version()
```

En coulisse, Laravel Mix se contentera simplement d'ajouter une query string √† la fin de l'URL (exemple : `/css/app.css?id=d907e32d5bfb758e04474f878b0216c3`), ce qui sera suffisant pour faire comprendre √† votre navigateur que vous avez besoin de code frais.

## Diminuer la taille de notre fichier en important le strict n√©cessaire

Lors de la compilation, Laravel Mix prend bien soin de minifier votre JavaScript. Combinez √ßa a de la compression c√¥t√© serveur, et on obtient un fichier vraiment light. Il est possible d'aller plus loin encore en important seulement les briques n√©cessaires de Bootstrap.

Admettons que pour votre site, vous n'utilisez que les alertes et les tooltips. Alors nous changeront notre app.js comme ceci :

```js
import { Alert, Tooltip } from 'bootstrap'
```

C'est termin√©, merci de m'avoir lu jusqu'au bout !

Dans le cas o√π vous pr√©f√®reriez un framework CSS moins "couteau Suisse", je vous recommande de vous int√©resser √† [Tailwind CSS](https://larabiz.fr/blog/comment-tailwind-css-3-laravel).
EOT,
            'certified_for_laravel' => 9,
            'created_at' => '2022-02-05 13:36:48',
        ]);

        $post
            ->addMediaFromUrl('https://user-images.githubusercontent.com/3613731/180869775-216c0437-0627-47ce-999a-f12160d59814.jpg')
            ->toMediaCollection('illustration');

        $post = Post::create([
            'user_id' => 1,
            'title' => 'D√©couvrez 13 nouveaut√©s et changements dans Laravel 9',
            'slug' => '13-nouveautes-changements-laravel-9',
            'excerpt' => "Laravel 9, la derni√®re version en date du framework, est truff√©e de nouveaut√©s et changements divers importants. Je vous pr√©sente 13 d'entre eux.",
            'content' => <<<'EOT'
Laravel est mis √† jour toute l'ann√©e √† travers des versions mineures. La diff√©rence avec Laravel 9 qui est une version majeure, c'est que de potentiels "breaking changes" ont √©t√© introduits et sont susceptibles d'affecter votre code.  
Dans le cas o√π votre code est test√©, vous n'aurez absolument aucun mal √† r√©p√©rer o√π √ßa casse et corriger le tir.

## 1. PHP 8.0 minimum est requis

PHP est un langage qui √©volue vite. Contrairement √† WordPress qui a propos√© pendant longtemps une compatibilit√© avec PHP 5.2, Laravel augmente la version minimum de PHP √† chaque occasion. Si vous √™tes coinc√©s √† la version 7.4 ou moins, c'est le moment de faire du forcing au boulot pour PHP 8 !

## 2. Le dossier `resources/lang` √† la racine

Le dossier `resources/lang` a finalement d√©m√©nag√© √† la racine afin que le dossier `resources` soit consacr√© exclusivement au front-end. Pas d'inqui√©tudes cela dit ; si vous avez mis √† jour vers Laravel 9 sans bouger le dossier, tout continuera √† fonctionner normalement.

## 3. Nouvelle pr√©sentation pour `php artisan route:list`

La pr√©c√©dente version de `route:list` √©tait un cauchemar √† l'utilisation. Celle-ci est tellement plus lisible. Je vous laisse appr√©cier. üëç

![](https://larabiz.fr/storage/21/conversions/3ca4c7ee9269f09f50032c09aa485de65681c58d-large.jpg)

## 4. G√©n√©rer un test coverage avec `php artisan test`

Le test coverage est loin d'√™tre une m√©trique infaillible pour d√©terminer la solidit√© d'un projet. N√©anmoins, si cela encourage les gens √† √©crire des tests, on ne se plaindra pas !

Installez d'abord Xdebug :

```bash
pecl install xdebug
```

Ajoutez cette ligne dans votre `php.ini` :

```ini
xdebug.coverage=on
```

Enfin, ex√©cutez cette commande Artisan dans votre projet :

```bash
php artisan test --coverage
```

![Le tests coverage dans Laravel 9.](https://larabiz.fr/storage/18/conversions/56052845673eab56d1b5ec6a9f164ed1eead1bee-medium.jpg)

## 5. Les migrations anonymes par d√©faut

Termin√© les conflits au niveau du nommage des migrations. Dor√©navant, gr√¢ce aux classes anonymes (introduites dans PHP 7), vous pouvez les d√©clarer comme ceci :

```php
<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

return new class extends Migration {
    public function up() : void
    {
        Schema::create('posts', function (Blueprint $table) {
            $table->id();
            $table->string('title');
            $table->longText('content');
            $table->timestamps();
        });
    }

    public function down() : void
    {
        Schema::dropIfExists('posts');
    }
};
```

Pensez √† mettre √† jour votre dossier `stubs` si c'est quelque chose que vous utilisez.

## 6. Une nouvelle mani√®re de d√©clarer ses mutators et ses accessors

Avant :

```php
public function getImgAttribute()
{
    return \Storage::url($this->img);
}

public function setImgAttribute($value)
{
    $this->attributes['img'] = trim($value, '/');
}
```

Apr√®s :

```php
use Illuminate\Database\Eloquent\Casts\Attribute;

public function img()
{
    return new Attribute(
        fn ($value) => \Storage::url($value),
		fn ($value) => trim($value, '/')
    );
}
```

Ou mieux encore, pour plus de claret√©, nous pouvons utiliser les named arguments de PHP 8 :

```php
return new Attribute(
    get: fn ($value) => \Storage::url($value),
    set: fn ($value) => trim($value, '/')
);
```

## 7. Les groupes de routes sous l'√©gide d'un seul contr√¥leur

Avez-vous des routes utilisant toutes le m√™me contr√¥leur¬†? Il est maintenant possible de les regrouper afin d'√©viter de se r√©p√©ter.

```php
Route::controller(PostController::class)->group(function () {
    Route::get('/blog', 'index')->name('posts.index');
    Route::get('/blog/{post:slug}', 'show')->name('posts.show');
});
```

## 8. Rendu d'une template Blade via une chaine de caract√®res

Il est d√©sormais possible de faire un rendu d'une template Blade directement depuis une chaine de caract√®re :

```php
Blade::render(
  '<p>Bonjour, {{ $name }} !</p>',
  ['name' => 'Homer'],
  deleteCachedView: true
);
```

## 9. Une syntaxe plus courte pour les slots des composants Blade

```blade
<x-section>
	<x-slot name="title"> {{-- [tl! --] --}}
    <x-slot:title> {{-- [tl! ++] --}}
		Bonjour, visiteur de Larabiz !
	</x-slot>

	...
</x-section>
```

De quoi nettoyer vos views et passer moins de temps √† √©crire. üëç

## De nouvelles directives Blade

### 10. `@checked`

```blade
<input
    type="checkbox"
    name="foo"
    value="1"
    @if ($value === 1) checked @endif {{-- [tl! --] --}}
    @checked($value === 1) {{-- [tl! ++] --}}
/>
```

### 11. `@selected`

```blade
<select name="country">
	@foreach ($countries as $country)
		<option
            value="{{ $country }}
            @if ($country === $user->country) selected @endif {{-- [tl! --] --}}
            @selected($country === $user->country) {{-- [tl! ++] --}}
        >
			{{ $country }}
		</option>
	@endforeach
</select>
```

## De nouveaux helpers

### 12. `str()`

```php
use Illuminate\Support\Str; // [tl! --]

// On transforme "ha" en "Hahahahaha!"
echo Str::of('foo') // [tl! --]
echo str('ha') // [tl! ++]
	->repeat(5)
	->headline()
	->append('!');
```

### 13. `to_route()` (√©galement dispo dans Laravel 8)

```php
return redirect()->to('foo'); // [tl! --]
return to_route('foo'); // [tl! ++]
```

Quel int√©r√™t¬†? C'est tout simplement plus simple √† lire.

## Bonus : un nouveau [laravel.com](https://laravel.com)

Il ne s'agit pas d'une nouveaut√© ayant un vrai rapport avec Laravel 9, mais il est agr√©able de constater que le site officiel re√ßoit toute l'attention qu'il m√©rite. Le design du site a √©t√© actualis√© et des am√©liorations ont √©t√© faites sur la coloration syntactique des bouts de code.

<figure>
<img src="https://larabiz.fr/storage/17/conversions/48f18889a1a64b511fc01db9aba6fe2846fc9c06-medium.jpg" alt="laravel.com avant." />
<figcaption>Avant.</figcaption>
</figure>

<figure>
<img src="https://larabiz.fr/storage/20/conversions/2670de6252f231496b565a3e4f061af1d20cb4bb-medium.jpg" alt="laravel.com apr√®s." />
<figcaption>Apr√®s.</figcaption>
</figure>

D'ailleurs, saviez-vous que [laravel.com](https://laravel.com) est open source¬†? Vous pouvez retrouver le d√©p√¥t sur [GitHub](https://github.com/laravel/laravel.com).

√Ä vos clavier, je vous donne rendez-vous dans le [guide de mise √† jour](https://laravel.com/docs/9.x/upgrade) officiel de Laravel ! ü•≥
EOT,
            'certified_for_laravel' => 9,
            'created_at' => '2022-02-10 17:35:24',
        ]);

        $post
            ->addMediaFromUrl('https://user-images.githubusercontent.com/3613731/180867152-3cf6bd45-3443-4072-95a9-5d6022af15ae.jpg')
            ->toMediaCollection('illustration');

        $post
            ->addMediaFromUrl('https://larabiz.fr/storage/21/3ca4c7ee9269f09f50032c09aa485de65681c58d.jpg')
            ->toMediaCollection('images');

        $post
            ->addMediaFromUrl('https://larabiz.fr/storage/18/56052845673eab56d1b5ec6a9f164ed1eead1bee.jpg')
            ->toMediaCollection('images');

        $post
            ->addMediaFromUrl('https://larabiz.fr/storage/17/48f18889a1a64b511fc01db9aba6fe2846fc9c06.jpg')
            ->toMediaCollection('images');

        $post
            ->addMediaFromUrl('https://larabiz.fr/storage/20/2670de6252f231496b565a3e4f061af1d20cb4bb.jpg')
            ->toMediaCollection('images');

        $post = Post::create([
            'user_id' => 1,
            'title' => 'Laravel VS. Lumen en 2022 : lequel utiliser pour des performances optimales¬†?',
            'slug' => 'laravel-vs-lumen-2022',
            'excerpt' => "Avec le temps, les choses changent. Les microframeworks n'√©chappent pas √† cette r√®gle et leur pertinence s'amoindrit. D√©couvrez pourquoi avec Laravel et Lumen.",
            'content' => <<<'EOT'
## Lumen n'est plus activement maintenu

R√©cemment, le fichier README de Lumen a √©t√© mis √† jour avec [ce message](https://github.com/laravel/lumen/commit/69b26578d2f15595ea901278434b74df459c4329) (traduit par mes soins) :

> Depuis la sortie de [Lumen](https://lumen.laravel.com), PHP a b√©n√©fici√© d'une multitude d'am√©liorations en termes de performances. Pour cette raison, en plus de la disponibilit√© de [Laravel Octane](https://laravel.com/docs/octane), nous ne recommandons plus de commencer de nouveaux projets avec Lumen. Nous recommandons plut√¥t [Laravel](https://laravel.com)._

Le message est clair : **ne perdez pas votre temps avec Lumen**. Mais laissez-moi tout de m√™me continuer l'argumentation.

## Le manque de fonctionnalit√©s fait perdre en productivit√©

Afin d'atteindre ses objectifs en termes de performances, Lumen est d√©barrass√© de tout un tas de fonctionnalit√©s. Certaines ne vous manqueront pas, mais vous pleurerez le d√©part de celles que vous √©tiez habitu√© √† utiliser avec Laravel.

## Il y a peu de diff√©rence sur un vrai projet en termes de performances

On trouve tout un tas de benchmarks sur le web, comme [celui-ci](https://igliop.medium.com/benchmarking-serverless-laravel-vs-lumen-with-bref-c3bdca37e5b8) ou [celui-l√†](https://medium.com/@jeffalmeida_27473/laravel-vs-lumen-what-should-i-use-63c196822b2d), et ils en viennent tous √† la m√™me conclusion : dans le contexte d'un vrai projet, la diff√©rence est quasiment imperceptible.

## Laravel est plus rapide que Lumen gr√¢ce √† Octane

Le principe est simple (sur le papier) : Octane garde en m√©moire le processus de bootstrapping de Laravel. Ainsi, √† chaque requ√™te, seul votre code est ex√©cut√©. Cela se traduit la plupart du temps en des gains de performances de l'ordre de 50% (exemple [ici](https://moduscreate.com/blog/boost-your-laravel-project-performance-with-octane/) ou [l√†](https://medium.com/geekculture/speed-up-your-laravel-projects-using-laravel-octane-swoole-server-a39f4a7fa889)). Ceci dit, il faut garder √† l'esprit qu'un projet avec Octane a ses particularit√©s et il y a quelques dispositions √† prendre au niveau de votre code. Mais si vous √™tes int√©ress√©s, je vous laisse consulter la [documentation](https://laravel.com/docs/octane).

## Conclusion

Pour des performances et une productivit√© accrues, utilisez Laravel + Octane. Lumen a fait son temps et le moment est venu pour lui de prendre sa retraite.
EOT,
            'certified_for_laravel' => 9,
            'created_at' => '2022-03-03 17:20:03',
        ]);

        $post
            ->addMediaFromUrl('https://larabiz.fr/storage/2bNSUy4X0IKUbtaqtTO5Nuj4GSYC9prgWwaGXOMe.jpg')
            ->toMediaCollection('illustration');

        $post = Post::create([
            'user_id' => 1,
            'title' => 'Pourquoi utiliser Laravel en 2022¬†? Voici 5 raisons.',
            'slug' => 'pourquoi-laravel-2022-5-raisons',
            'excerpt' => "D√©buter en PHP n'est pas √©vident. L'√©cosyst√®me est √©norme et il est difficile de se d√©cider sur un framework. D√©couvrez pourquoi choisir Laravel en 2022.",
            'content' => <<<'EOT'
Le but de cet article n'est pas d'√©noncer toutes les fonctionnalit√©s de Laravel (pour √ßa, vous avez la [documentation officielle](https://laravel.com/docs)).  
Je suis plut√¥t l√† pour vous soulager du fardeau du choix en vous pr√©sentant les possibilit√©s du framework *dans les grandes lignes* afin que vous ayez une vision claire des b√©n√©fices.

Avant de commencer, je pense qu'il est utile de rappeler pourquoi vous √™tes confront√©s au choix d'un framework :

- Constamment r√©inventer la roue √† chaque nouveau projet est une perte de temps. Le temps, c'est de l'argent. Un client heureux est un client qui est satisfait de la rapidit√© et de la qualit√© de votre travail ;
- Les entreprises l'ont bien compris. Rarement vous trouverez une offre d'emploi ne demandant pas la maitrise d'un framework ;
- Le code d'un framework est √©crit, test√© et √©prouv√© par des milliers de d√©veloppeurs. Peu importe votre niveau d'exp√©rience, votre code sera toujours moins fiable.

R√©pondons maintenant √† ce fameux "pourquoi" !

## Une accessibilit√© d√©concertante

Laravel est un framework dot√© d'une syntaxe simple et √©l√©gante. Il est ais√©ment possible d'√©crire du code concis, qui se lit comme de l'anglais.

Disons que nous souhaitons ajouter un produit dans notre table `products`. Voici comment faire avec Symfony :

```php
$entityManager = $doctrine->getManager();

$product = new Product();
$product->setName('Keyboard');
$product->setPrice(1999);
$product->setDescription('Ergonomic and stylish!');

$entityManager->persist($product);

$entityManager->flush();
```

La m√™me chose, mais avec Laravel :

```php
Product::create([
	'name' => 'Keyboard',
	'price' => 1999,
	'description' => 'Ergonomic and stylish!',
]);
```

Chaque approche a ses forces et ses faiblesses. Au final, il est possible de faire les m√™mes choses quel que soit l'outil que vous utilisez. Personnellement, j'appr√©cie l'√©l√©gance, le pragmatisme et la non-conformit√© de Laravel. Le code est moins intimidant, ce qui rend le framework plus facile √† appr√©hender.

## Un √©cosyst√®me officiel et tierce-partie complet qui vous aide √† cr√©er de la valeur

## Une communaut√© accueillante qui vous aidera du mieux qu'elle peut

## Un framework qui √©volue rapidement

Laravel respecte l'organisation suivante :
- Une version majeure par an (exemple : 9) ;
- Une version mineure plusieurs fois par mois (exemple : 9.1) ;
- Une version patch aussi souvent que cela est n√©cessaire (exemple : 9.1.1).

Regardez [le changelog](https://github.com/laravel/framework/blob/9.x/CHANGELOG.md), vous verrez √† quel point l'√©quipe de Taylor Otwell et les contributeurs ne ch√¥ment pas.

Chaque nouvelle fonctionnalit√© ajout√©e dans une version mineure est test√©e afin qu'elle ne casse pas la compatibilit√© avec votre code.
Par exemple, si votre *composer.json* requiert `laravel/framework: "^9/0"`, alors vous pouvez √™tre assur√©s que votre code ne cassera pas en production apr√®s un `composer update`.

Bien s√ªr, certains d'entre vous savent peut-√™tre que le seul v√©ritable moyen d'assurer la stabilit√© d'un projet est d'√©crire des tests automatis√©s. Et justement, il s'agit d'un des points forts de Laravel.

## √âcrire des tests automatis√©s avec Laravel est une promenade de sant√©

L'√©criture de tests automatis√©s est un sujet √©norme en programmation. **Laravel vous permet de facilement vous lancer dans cette discipline que tout d√©veloppeur exp√©riment√© devrait maitriser**.

- **_√ätre capable d'√©crire des tests fera de vous un d√©veloppeur plus fiable._**
- Validez le comportement de votre application, de mani√®re automatis√©e ;
- Moins de t√¢ches fastidieuses. Plut√¥t que d'ouvrir votre navigateur ou client HTTP, lancez vos tests avec votre raccourci clavier ou votre commande favorite. 10 fois, 100 fois, peu importe ! Les tests s'ex√©cutent en quelques secondes seulement ;
- √âcrire des tests pr√©vient les bugs. Bien s√ªr, tout cela d√©pendra de la couverture de vos tests, mais vous obtiendrez des r√©sultats *toujours* meilleurs ;
- Couplez vos tests √† de l'int√©gration continue. Commitez, pushez et seulement si vos tests passent, alors le code sera d√©ploy√© en production.

Il y a plein d'autres avantages √† √©crire des tests. Et il en existe plusieurs types. Mais pour ceux qui n'ont pas d'exp√©rience en la mati√®re, je pense vous avoir donn√© suffisamment d'√©l√©ments pour vous donner envie de creuser le sujet.  
Plus d'informations sur [la documentation officielle des tests](https://laravel.com/docs/testing).

## Conclusion

Laravel est un framework accessible de par son approche pragmatique du code. Il est performant, extensible, soutenu par une large communaut√© et vous aidera √† atteindre vos objectifs.  
Investir dans l'apprentissage de ce framework vous permettra d'am√©liorer la satisfaction de votre employeur, de vos clients ou de contribuer au succ√®s de votre startup.
EOT,
            'certified_for_laravel' => 9,
            'created_at' => '2022-03-08 00:19:18',
        ]);

        $post
            ->addMediaFromUrl('https://larabiz.fr/storage/uKh5vPr2BHWZ53bT9khO63u6SU3p3wMU0jw2sfTq.jpg')
            ->toMediaCollection('illustration');

        $post = Post::create([
            'user_id' => 1,
            'title' => 'Comment cr√©er un contr√¥leur avec Laravel',
            'slug' => 'comment-creer-controleur-laravel-artisan',
            'excerpt' => 'Artisan nous offre la possibilit√© de gagner du temps en g√©n√©rant les classes les plus utilis√©es dans un projet Laravel. Int√©ressons-nous aux contr√¥leurs.',
            'content' => <<<'EOT'
Cr√©er un contr√¥leur (ou "controller" en anglais) est une t√¢che r√©currente lorsque l'on d√©veloppe avec Laravel. Il s'agit d'un √©l√©ment essentiel du framework √©tant donn√© qu'il repose sur le mod√®le de conception MVC (Model View Controller).

*Attention, cet article part du principe que vous savez d√©j√† √† quoi sert un contr√¥leur.*

## Cr√©er un contr√¥leur avec Artisan

Commen√ßons par cr√©er un contr√¥leur sous sa forme la plus simple gr√¢ce √† la commande suivante :

```bash
php artisan make:controller PostController
```

Rendez-vous dans *app/Http/Controllers* et ouvrez *PostController.php* afin de voir √† quoi cela ressemble.

```php
namespace App\Http\Controllers;

use Illuminate\Http\Request;

class PostController extends Controller
{
    //
}
```

Bien entendu, il est possible de gagner plus de temps en g√©n√©rant des contr√¥leurs plus complexes.

## Cr√©er un contr√¥leur invokable

Les contr√¥leurs invokables sont extr√™mement utiles. Admettons que vous scindiez chacune de vos actions CRUD (Create, Read, Update et Delete) dans un contr√¥leur unique. Au lieu de cr√©er, par exemple, une m√©thode `store` dans votre contr√¥leur `StorePostController`, vous pourriez plut√¥t utiliser [la m√©thode magique `__invoke` de PHP](https://www.php.net/manual/fr/language.oop5.magic.php#object.invoke).

```bash
php artisan make:controller StorePostController --invokable
```

```php
namespace App\Http\Controllers;

use Illuminate\Http\Request;

class StorePostController extends Controller
{
    /**
     * Handle the incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function __invoke(Request $request)
    {
        //
    }
}
```

Ensuite, dans votre fichier `routes/web.php`, vous pouvez faire pointer la route vers votre contr√¥leur :

```php
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\StorePostController;

Route::post('/posts', [StorePostController::class, 'store']); // [tl! --]
Route::post('/posts', StorePostController::class); // [tl! ++]
```

Pratique, n'est-il pas¬†? üá¨üáß

## Cr√©er un contr√¥leur pour une ressource

Selon vos pr√©f√©rences, vous aurez peut-√™tre envie de regrouper toutes vos m√©thodes CRUD pour un mod√®le donn√© dans un seul contr√¥leur.

Ne bougez pas, Laravel assure vos arri√®res !

```bash
php artisan make:controller PostController --resource
```

Ce qui donnera :

```php
namespace App\Http\Controllers;

use App\Models\Post;
use Illuminate\Http\Request;

class PostController extends Controller
{
	‚Ä¶

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Models\Post  $post
     * @return \Illuminate\Http\Response
     */
    public function show(Post $post)
    {
        //
    }

    ‚Ä¶
```

Notez que Laravel aura automatiquement devin√© quel mod√®le nous souhaitons utiliser, car il existe d√©j√† et nous respectons les conventions de nommage et d'organisation du framework.

Bien entendu, il est possible de sp√©cifier le chemin vers votre mod√®le manuellement dans le cas o√π votre projet aurait une structure plus exotique.

```bash
php artisan make:controller PostController --resource --model="App\Model\Post"
```

## Cr√©er un contr√¥leur pour une ressource destin√©e √† √™tre expos√©e via une API RESTful

Pour celles et ceux qui d√©veloppent une API RESTful, sachez que vous pouvez compl√®tement omettre les m√©thodes `create` et `edit` de votre CRUD. En effet, celles-ci servent essentiellement √† pr√©senter des formulaires. Formulaires compl√®tement inutiles dans cette circonstance.

```bash
php artisan make:controller PostController --api
```

## Cr√©er un contr√¥leur pour une ressource ayant un parent

Imbriquer vos resources est une bonne pratique et vous fera √©galement √©conomiser quelques lignes de code.

Disons que nous avons des commentaires associ√©s √† chaque post.

```php
use Illuminate\Support\Facades\Route;

Route::resource('posts.comments');
```

Nous pouvons g√©n√©rer en une seule commande un contr√¥leur prenant en compte cette sp√©cificit√©.

```bash
php artisan make:controller CommentController --resource --parent="App\Model\Post"
```

```php
namespace App\Http\Controllers;

use App\Model\Comment;
use App\Models\Post;
use Illuminate\Http\Request;

class CommentController extends Controller
{
	‚Ä¶

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Models\Post  $post
     * @param  \App\Model\Comment  $comment
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, Post $post, Comment $comment)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\Post  $post
     * @param  \App\Model\Comment  $comment
     * @return \Illuminate\Http\Response
     */
    public function destroy(Post $post, Comment $comment)
    {
        //
    }
}
```

## Conclusion

Un contr√¥leur Laravel peut prendre diff√©rentes formes selon l'usage que l'on veut en faire et Artisan vous permet d'en cr√©er une sacr√©e vari√©t√© en un clin d'≈ìil.
Ouvrez votre Terminal et ex√©cutez la commande `php artisan help make:controller`, car il y a encore beaucoup d'autres options dont je n'ai pas parl√©. üëç
EOT,
            'certified_for_laravel' => 9,
            'created_at' => '2022-04-18 16:04:34',
        ]);

        $post
            ->addMediaFromUrl('https://user-images.githubusercontent.com/3613731/180867647-2a5dfd43-b9df-4461-948b-9384612c14f4.png')
            ->toMediaCollection('illustration');

        $post = Post::create([
            'user_id' => 1,
            'title' => 'Comment cr√©er un mod√®le, une migration et plus encore avec Artisan',
            'slug' => 'comment-creer-modele-migration-laravel-artisan',
            'excerpt' => 'Cr√©er les fichiers et le code de base pour chaque mod√®le Eloquent peut rapidement devenir r√©p√©titif. Heureusement, Artisan vient √† notre rescousse.',
            'content' => <<<'EOT'
## Cr√©er un mod√®le avec Artisan

Ici, rien de farfelu. Cette commande vous permettra de g√©n√©rer un mod√®le "Post" que vous retrouverez dans le dossier *app/Models*.

```bash
php artisan make:model Post
```

## Cr√©er un mod√®le accompagn√© d'une migration

Savez-vous qu'il est aussi possible de g√©n√©rer une migration correspondant au mod√®le¬†?

*Peuh, trop facile, il suffit de faire √ßa !*

```bash
php artisan make:migration create_posts_table
```

Eh bien oui ! On peut le faire. Mais il y a plus rapide encore. Lorsqu'on cr√©er un mod√®le, il est tout simplement possible de lui demander de cr√©er une migration en m√™me temps gr√¢ce √† l'option `--migration` (ou `-m` pour faire plus court) !

```bash
php artisan make:model Post -m
```

Rendez-vous dans *database/migrations*. üëç

## Cr√©er un mod√®le, une migration et une factory

Maintenant que nous avons le mod√®le et la migration, nous pouvons avancer dans le d√©veloppement de notre projet.  
Mais si vous souhaitez avoir un environnement de d√©veloppement local optimal, je vous conseille d'utiliser les factories.

Cet article n'est pas l√† pour vous aider √† comprendre √† quoi elles servent, mais pour r√©sumer en deux phrases, les factories permettent de g√©n√©rer en quantit√© illimit√©e des mod√®les en base de donn√©e. Il est m√™me possible d'utiliser [Faker](https://github.com/FakerPHP/Faker) (accessible depuis les factories) pour injecter de la fake data g√©n√©r√©e al√©atoirement, tels que des noms, adresses e-mails, adresses postales, et j'en passe.

Pour en revenir √† Artisan, nous allons utiliser la m√™me commande que ci-dessus, tout en y ajoutant une option `--factory` (ou `-f` pour faire plus court).

```bash
php artisan make:model Post -mf
```

Vous trouverez la factory fra√Æchement cr√©√©e dans *database/factories*.

## Cr√©er un mod√®le, une migration, une factory, une policy, un controller et plus encore

Vous l'aurez compris, la commande `php artisan make:model` peut recevoir une flop√©e d'options. Options visibles avec la commande `php artisan help make:model`.  
En voici la liste dans le cas o√π vous ne seriez pas devant votre ordinateur :

```bash
php artisan help make:model

Description:
  Create a new Eloquent model class

Usage:
  make:model [options] [--] <name>

Arguments:
  name                  The name of the class

Options:
  -a, --all             Generate a migration, seeder, factory, policy, and resource controller for the model
  -c, --controller      Create a new controller for the model
  -f, --factory         Create a new factory for the model
      --force           Create the class even if the model already exists
  -m, --migration       Create a new migration file for the model
      --morph-pivot     Indicates if the generated model should be a custom polymorphic intermediate table model
      --policy          Create a new policy for the model
  -s, --seed            Create a new seeder for the model
  -p, --pivot           Indicates if the generated model should be a custom intermediate table model
  -r, --resource        Indicates if the generated controller should be a resource controller
      --api             Indicates if the generated controller should be an API controller
  -R, --requests        Create new form request classes and use them in the resource controller
      --test            Generate an accompanying PHPUnit test for the Model
      --pest            Generate an accompanying Pest test for the Model
  -h, --help            Display help for the given command. When no command is given display help for the list command
  -q, --quiet           Do not output any message
  -V, --version         Display this application version
      --ansi|--no-ansi  Force (or disable --no-ansi) ANSI output
  -n, --no-interaction  Do not ask any interactive question
      --env[=ENV]       The environment the command should run under
  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
```

## Aller plus loin

La g√©n√©ration de code via Artisan peut faire gagner un temps consid√©rable sur le long terme. Mais nous pouvons aller plus loin encore en customisant les stubs ("souche" en fran√ßais) qu'il utilise afin d'avoir une plus grande libert√© sur le code g√©n√©r√© et son format.

```bash
php artisan stub:publish
```

Plus d'informations sur [la documentation officielle](https://laravel.com/docs/9.x/artisan#stub-customization).
EOT,
            'certified_for_laravel' => 9,
            'created_at' => '2022-05-23 07:51:56',
        ]);

        $post
            ->addMediaFromUrl('https://larabiz.fr/storage/FIhHrH9SzaWHnvfG4V4a2WuZlX5h5QtJsYCfID5U.jpg')
            ->toMediaCollection('illustration');

        $post = Post::create([
            'user_id' => 1,
            'title' => 'Comment installer Laravel sur Mac sans avoir recours √† Docker gr√¢ce √† Valet',
            'slug' => 'comment-installer-laravel-mac-valet-docker',
            'excerpt' => "Laravel Valet permet de d√©ployer un environnement de d√©veloppement sur votre machine en moins de temps qu'il n'en faut pour le dire. D√©couvrez comment faire.",
            'content' => <<<'EOT'
√âtant partisan du pragmatisme et ayant beaucoup de mal √† supporter les contraintes d'un environnement bas√© sur Docker, je pr√™che r√©guli√®rement les bienfaits de [Laravel Valet](https://laravel.com/docs/valet). Cet outil officiel vous permet de mettre en place un environnement de d√©veloppement Laravel (voir m√™me Symfony ou WordPress) d'un simple claquement de doigts. En fonction de la vitesse de votre connexion internet et de votre machine, cela peut √™tre r√©gl√© en l'espace de 5 minutes.

## Installer le gestionnaire de packages Homebrew

Homebrew est un gestionnaire de packages Mac maintenu par la communaut√©. Si vous √™tes familier avec APT (Advanced Package Tool) sur Debian et ses d√©riv√©s, vous vous sentirez comme √† la maison. Vous trouverez les instructions sur le site officiel de Homebrew. Il n'y a qu'une seule commande √† ex√©cuter :

```bash
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
```

Lors de l'installation, vous aurez peut-√™tre √† installer Xcode Command Line Tools. Je vous rassure : vous n'avez pas √† vous soucier de sa fonction. Il est simplement utile de le mentionner, car son installation peut prendre un peu de temps (et il est impossible de s'en passer, car Homebrew d√©pend de ce dernier).

## Installer PHP, Composer et compagnie

Une fois l'installation d'Homebrew termin√©e, nous pouvons enfin installer les outils qui nous concernent :

```bash
brew install composer
```

Cette commande rapatriera √©galement PHP, car Composer est bas√© sur ce dernier comme vous le savez. Par cons√©quent, aucun besoin de faire `brew install php`.

Sachez qu'il est aussi possible d'installer d'autres outils tels que MySQL, Node.js et Redis qui vous seront utiles voir m√™mes indispensables dans un environnement Laravel.

```bash
brew install mysql node redis
```

## Ajouter Valet et l'installeur officiel de Laravel

Valet et l'installeur officiel de Laravel sont des packages Composer. Vous avez certainement l'habitude d'installer des packages dans vos projets (exemple : `composer require laravel/fortify`). Mais cette fois-ci, nous allons le faire de mani√®re globale. Ce qui veut dire qu'ils ne seront rattach√©s √† aucun projet.

```bash
composer global laravel/valet laravel/installer
```

Th√©oriquement, √† l'issue de cette installation, nous devrions √™tre capables de configurer Laravel Valet gr√¢ce √† la commande `valet install`. Mais si vous essayez de l'ex√©cuter, vous vous rendrez compte que votre terminal n'a absolument aucune id√©e de ce qu'il est cens√© faire.
L'astuce, c'est de sp√©cifier le chemin complet vers le binaire comme ceci :

```bash
~/.composer/vendor/bin/valet install
```

Nous sommes d'accord, il est possible de faire mieux. Ce qui nous am√®ne √† l'√©tape suivante.

## Ajouter les binaires des packages Composer dans votre PATH

La variable d'environnement `PATH` contient une liste de dossiers (s√©par√©s par `:`). Chacun de ces dossiers contient des binaires et votre terminal saura, par exemple, que lorsque vous souhaiterez utiliser PHP en ligne de commande, il devra aller chercher le binaire `php` dans le dossier `/opt/homebrew/bin`.

```bash
echo $PATH
```

Dans notre cas, nous souhaitons dire au terminal d'√©galement prendre en compte le dossier `~/.composer/vendor/bin` (o√π se trouvent les binaires `valet` et `laravel`).  
Pour cela, nous allons ajouter le dossier √† notre PATH comme ceci :

```bash
echo "export PATH=$PATH:$HOME/.composer/vendor/bin" >> ~/.bash_profile
```

Ensuite, demandons √† notre terminal de prendre en compte la nouvelle configuration :

```bash
source ~/.bash_profile
```

**Pour ceux utilisant [Oh My Zsh](https://ohmyz.sh), faites plut√¥t √ßa dans `~/.zshrc`.**

Pour les plus curieuses et curieux d'entre vous, d√©composons ce que nous venons de faire :

- `export PATH=` permet de d√©finir une variable d'environnement et de lui affecter la valeur de notre choix.
- `export PATH=$PATH` permet d'affecter notre nouvelle variable PATH √† la valeur de la variable PATH d√©j√† d√©finie. En gros, apr√®s cette commande, PATH sera √©gale √† `dossier1:dossier2:dossier3:‚Ä¶`.
- `export PATH=$PATH:$HOME/.composer/vendor/bin` nous permet tout simplement de faire en sorte que notre variable PATH soit √©gale √† `dossier1:dossier2:dossier3:/Users/Homer/.composer/vendor/bin`

## Configurer Laravel Valet

Maintenant que nos binaires `valet` et `laravel` sont accessibles sans avoir √† entrer leur chemin complet, configurons Valet en utilisant la commande suivante :

```bash
valet install
```

Ensuite, cr√©ons un dossier qui contiendra tous nos projets web. Pour ma part, je les mets tous dans un dossier *Sites* √† la racine de mon dossier utilisateur.

```bash
mkdir ~/Sites
```

Rendez-vous dans ce nouveau dossier et demandons √† Valet de rendre disponible chaque projet sur un domaine en *.test* :

```bash
cd ~/Sites
valet park
```

√Ä partir de l√†, tout devrait √™tre OK. Vous devriez √™tre en mesure d'ex√©cuter un simple `laravel new hello-world` et d'y acc√©der via [http://hello-world.test](http://hello-world.test)

## Autoriser Valet √† √™tre ex√©cut√© sans privil√®ges (sudo)

Une chose assez fastidieuse que vous remarquerez au fur et √† mesure que vous utiliserez Valet, c'est de constamment avoir √† entrer votre mot de passe administrateur. Afin d'y rem√©dier, il existe une simple commande pour que notre terminal fasse confiance √† Valet.

```bash
valet trust
```

## Autoriser l'acc√®s √† un site via HTTPS

Pouvoir acc√©der √† un site local via HTTPS pr√©sente plusieurs avantages. Valet propose la commande `secure` :

```bash
valet secure hello-world
```

Et pour revenir en arri√®re :

```bash
valet unsecure hello-world
```

## Ex√©cuter un site via une version diff√©rente de PHP

Dans le cas o√π l'un des projets sur lesquels vous travaillez requiert une version diff√©rente de PHP, sachez qu'il est possible de demander √† Valet d'utiliser une autre version de PHP :

```bash
valet use php@8.0
```

En revanche, la plupart des gens aimeraient changer la version de PHP seulement pour un site en particulier. Depuis peu, Valet permet de le faire :

```bash
valet isolate --site hello-world php@8.0
```

Bien s√ªr, il est aussi possible de revenir en arri√®re :

```bash
valet unisolate --site hello-world
```
EOT,
            'certified_for_laravel' => 9,
            'created_at' => '2022-06-28 12:42:17',
        ]);

        $post
            ->addMediaFromUrl('https://larabiz.fr/storage/LTFRCPtx77VN3JzU0fU5pKDsTqG8dbk1DdK82Yzw.jpg')
            ->toMediaCollection('illustration');

        $post = Post::create([
            'user_id' => 1,
            'title' => "Avant d'utiliser le syst√®me de files d'attente de Laravel, essayez dispatchAfterResponse()",
            'slug' => 'files-attente-queues-laravel-dispatch-after-response',
            'excerpt' => 'Il est primordial dans votre carri√®re que vous appreniez √† ne pas d√©ployer des solutions trop sophistiqu√©es pour des besoins modestes. Laravel en est conscient et propose des solutions.',
            'content' => <<<'EOT'
Les files d'attentes sur Laravel (ou queues) permettent d'ex√©cuter des t√¢ches chronophages en arri√®re-plan sans faire attendre vos visiteurs devant un √©cran de chargement.

Cependant, il y a certaines t√¢ches, comme l'envoi d'un simple e-mail, qui ne devraient pas avoir besoin d'une telle infrastructure. L'id√©al serait de pouvoir afficher votre page sur le navigateur de l'utilisateur et *ensuite* d√©clencher l'envoi de l'e-mail.

Prenons un formulaire d'abonnement √† une newsletter comme exemple :
- L'utilisateur valide son intention de s'abonner en cliquant sur le bouton "M'abonner" apr√®s avoir entr√© son adresse ;
- Il est quasi-instantan√©ment redirig√© vers une page lui demandant surveiller sa bo√Æte de r√©ception pour l'e-mail de confirmation ;
- L'envoi de l'e-mail est d√©clench√© juste apr√®s, ce qui permet de ne pas avoir une latence d'une √† deux secondes avant d'afficher la page mentionn√©e √† l'√©tape pr√©c√©dente.

Comment arrive-t-on a un tel r√©sultat sans utiliser les queues¬†? Tout simplement en utilisant la m√©thode `dispatchAfterResponse()Àã.
Imaginons notre contr√¥leur :

```php
public function store(StoreSubscriberRequest $request)
{
    // 1. On cr√©e notre subscriber non-confirm√©.
    Subscriber::create($request->validated());

    // 3. On envoie l'e-mail de confirmation.
    dispatch(function () {
        //
    })->afterResponse();
    // Ou :
    // MonJobPasTropLongAExecuter::dispatchAfterResponse();

    // 2. On redirige l'utilisateur vers la page lui demandant de v√©rifier sa boite mail pour la confirmation.
    return to_route('pending-subscription');
}
```

**Pr√©cisons que ce code n'aura l'effet d√©sir√© que si vous utilisez PHP-FPM. (Ce qui est probablement le cas pour 99% d'entre-vous.)**

Bien s√ªr, il s'agit d'une feature √† utiliser avec parcimonie et seulement pour des t√¢ches courtes, car il y a peu de chances que vous saturiez votre serveur de cette mani√®re.

Pour des besoins plus avanc√©s, utiliser le syst√®me de queues de Laravel vous permettra d'ex√©cuter les t√¢ches au compte-gouttes et avec un parall√©lisme appropri√© √† la configuration de votre machine afin de ne pas y mettre le feu.
EOT,
            'certified_for_laravel' => 9,
            'created_at' => '2022-07-06 09:14:37',
        ]);

        $post
            ->addMediaFromUrl('https://larabiz.fr/storage/e10e48cd9bd3cc3c461da73b6f0b0d11ef66eb18.jpg')
            ->toMediaCollection('illustration');

        $post = Post::create([
            'user_id' => 1,
            'title' => 'Devenir d√©veloppeur web PHP en 2022 : 4 points importants apr√®s votre premi√®re embauche',
            'slug' => 'devenir-developpeur-web-php-2022-4-points-importants-embauche-emploi',
            'excerpt' => "√ätre un d√©veloppeur appr√©ci√© et respect√© fera de vous une personne hautement employable. Voici quelques conseils de la part de quelqu'un n'ayant jamais rien fait pour que cela lui arrive.",
            'content' => <<<'EOT'
## Soyez modestes

Lorsque je suis devenu d√©veloppeur employ√© en 2013, j'ai d√©but√© une p√©riode tr√®s arrogante √† la suite de quelques succ√®s.

Par exemple, lors de mon entretien d'embauche dans une agence de communication, il m'a fallu modifier un projet existant en respectant un cahier des charges. Rien d'exceptionnel, il s'agit d'une t√¢che potentiellement tr√®s simple. Ceci √©tant dit, j'ai appris plus tard que le d√©veloppeur ayant pass√© son entretien apr√®s moi s'√©tait simplement content√© de copier/coller mon travail. J'y ai vu l√† une confirmation de ma sup√©riorit√© par rapport aux autres d√©veloppeurs de niveau √©quivalent (ce qui est pu√©ril).

Ajoutez √† √ßa le fait j'√©tais enti√®rement autodidacte, ou que mon arriv√© dans l'agence nous a permis de basculer sur WordPress, ce qui a grandement am√©lior√© notre productivit√©. (Ils avaient pour habitude de r√©inventer la roue √† chaque projet.)  Par cons√©quent, je contribuais √† la mont√©e en comp√©tences du responsable du p√¥le web de l'entreprise (plus √¢g√© et plus exp√©riment√©) et on venait souvent me demander lorsqu'il y avait une question technique.

Croyez-moi, la largeur de mes chevilles augmentait √† vue d'oeil.

Toutes ces choses positives ne valent malheureusement pas grand chose lorsque votre attitude est d√©plorable. Si vous vous reconnaissez, arr√™tez tout de suite. **Ne vous vantez pas en √©talant vos connaissances** et **ne rabaissez pas vos coll√®gues**. **Soyez bienveillants** et votre r√©putation s'en trouvera am√©lior√©e.

## Personne n'est parfait. Un code livr√© est pr√©f√©rable √† un code parfait.

Avez-vous entendu parler des chim√®res¬†? Savez-vous ce qu'elles ont en commun avec la perfection¬†? Voici ce que Wikip√©dia nous dit √† leur sujet :

> Une chim√®re, est une id√©e irrationnelle produite par l'imagination, un fantasme irr√©alisable.

C'est l'analogie id√©ale. La perfection *"est une id√©e irrationnelle produite par l'imagination, un fantasme irr√©alisable."* C'est aussi un concept hautement subjectif. Ce qui rend votre code parfait √† vos yeux ne l'est pas forc√©ment pour les autres, ni m√™me √† ceux de votre vous futur.

Passer un temps consid√©rable sur la forme au d√©triment du reste peut √™tre extr√™mement n√©faste pour votre carri√®re.  
Il faut aussi bien garder √† l'esprit que les gens pour qui vous produisez le code se moquent de savoir si que vous utilisez un design pattern quelconque ou je ne sais quelle autre fantaisie qui ne fait fantasmer qu'un d√©veloppeur.  
**Leur but est que votre code g√©n√®re un retour sur investissement, car vous avez √©t√© pay√© pour √ßa**.

Lorsque vous travaillez sur un projet, il est important qu'il soit livr√© dans un √©tat d√©cent. Mais ne retardez pas la livraison pour des probl√®mes ou des besoins qui ne se poseront peut-√™tre jamais.

**Faites seulement ce qu'on vous demande et corrigez seulement les bugs auxquels vous √™tes confront√©s. Votre employeur a besoin de quelqu'un d'efficace.**

Imaginez-vous un instant avoir command√© une nouvelle maison et voir le chantier prendre un retard consid√©rable car l'artisan a d√©cid√© de s'attarder sur l'apparence du carrelage ou de poser une porte au plafond au cas o√π vous aimeriez faire un autre √©tage ([exemple ici](https://www.youtube.com/watch?v=dEP7aEyTOf0)). Nous sommes d'accord, personne n'a envie d'√™tre confront√© √† ce genre de situation.

## Soyez pragmatiques

M√™me les plus grands font appel √† l'open source, Google et Stack Overflow.

## Celui qui sait qu'il ne sait pas sait beaucoup.

## Conclusion

Modestie et pragmatisme sont les ma√Ætres-mots. Accumulez de l'exp√©rience en gardant √† l'esprit tout ce que vous avez lu jusqu'√† maintenant et allez plus loin seulement apr√®s m√ªre r√©flexion.
EOT,
            'certified_for_laravel' => null,
        ]);

        $post
            ->addMediaFromUrl('https://user-images.githubusercontent.com/3613731/181029204-7a461f9f-66f3-4c8f-aba4-ed4fe2eda68b.jpg')
            ->toMediaCollection('illustration');
    }
}
